require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
require 'openssl'
$str = File.read(__FILE__) * 1000
$key = 'ma23a0sdf' * 4

# store them for java testing
File.open 'ptest', 'w' do |f|
  f << $str
end
File.open 'key', 'w' do |f|
  f << $key
end
def crypt
  1000.times do
    c = OpenSSL::Cipher.new 'aes-256-cbc'
    c.encrypt
    c.key = $key
    c.update $str
    c.final
  end
end

t = Time.now.to_f
crypt
diff = (Time.now.to_f - t) * 1000
puts "finished in #{diff} ms"
